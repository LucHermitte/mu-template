VimL:" vim-rc-local C/C++ projects File Template, Luc Hermitte <hermitte {at} free {dot} fr>, 01st Oct 2013
VimL: let s:value_start = 'ยก'
VimL: let s:value_end   = s:value_start
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:_prj_config = s:Param('_prj_config', 'g:'.lh#marker#txt('MyProject').'_config')

" ======================[ &path {{{2
" don't search into included file how to complete
setlocal complete-=i

" No sub project
" let b:project_crt_sub_project = matchstr(lh#path#strip_common([<+s:_prj_config+>.paths.trunk, expand('%:p:h')])[1], '[^/\\]*[/\\][^/\\]*')

" Local vimrc variable for source dir
" Will be simplified eventually to use p:paths.sources everywhere
let s:project_sources_dir = lh#option#get('paths.sources')
call lh#let#to('p:project_sources_dir', s:project_sources_dir)

" Option for Mu-Template-> |s:path_from_root()|
" Now: p:paths.sources is enough!

" Used by mu-template to generate file headers and header-gates.
let s:cpp_included_paths = lh#let#to('p:cpp_included_paths', [s:project_sources_dir])

" If the project has .h.in files that are generated in the build
" directory, uncomment the next line
" let s:cpp_included_paths += [lh#option#get('BTW.compilation_dir')]

" Configures lh-cpp complete includes sub-plugin -> ftplugin/c/c_AddInclude.vim
call lh#let#to('p:includes',
      \ [ lh#path#to_dirname(s:project_sources_dir) . '**'
      \ , lh#path#to_dirname(lh#option#get('BTW.compilation_dir')) . '**'])
"      For config.h.in files and alike
"      let b:includes += [lh#option#get(BTW.compilation_dir) . '/**']
" todo: adapt it automatically to the current compilation dir

if SystemDetected() == 'unix'
  " Add your 3rd party libraries used in the project here
  call lh#path#add_path_if_exists('p:includes', $HOME.'/dev/boost/1_51_0/install/include/')
  call lh#path#add_path_if_exists('p:includes', '/usr/local/include/**')
  call lh#path#add_path_if_exists('p:includes', '/usr/include/**')
endif

MuT:  if has_key(s:_prj_kind, 'cmake')
" Fetch INCLUDED paths from cmake cache configuration, and merge every thing
" into p:includes
function! s:UpdateIncludesFromCmake()
  try
    let included_paths = lh#cmake#get_variables('INCLUDE')
    call filter(included_paths, 'v:val.value!~"NOTFOUND"')
    let cmake_paths = values(map(copy(included_paths), 'v:val.value'))
    let includes = lh#option#get('includes') " reference to actual variable!
    let includes += cmake_paths
    call uniq(sort(includes))
  catch /.*/
    call lh#common#warning_msg(v:exception)
  endtry
endfunction
call s:UpdateIncludesFromCmake()

MuT:  endif
" Setting &path
call s:project.set('&path', '+='.lh#path#fix(lh#option#get('BTW.compilation_dir')).'/**')
" If the project has .h.in files that are generated in the build
" directory, uncomment the next line
" sources dir is automatically added thanks to lh-tags v2
for p in lh#option#get('includes')
  if p !~ '^/usr'
    call s:project.set('&path', '+='.lh#path#fix(p))
  endif
endfor

if 0
  " gcov output path
  let b:gcov_files_path = lh#option#get('paths.sources').'/obj/debug/Testing/CoverageInfo'
endif

" ======================[ Settings for compil_hints {{{2
let b:compil_hints_autostart = 1

" ======================[ Settings for BTW {{{2
if SystemDetected() == 'msdos'
  :BTW setlocal cmake
  " echomsg SystemDetected()
  if SystemDetected() == 'unix' " cygwin
    " then cygwin's cmake does not work -> use win32 cmake
    let $PATH=substitute($PATH, '\(.*\);\([^;]*CMake[^;]*\)', '\2;\1', '')
    BTW addlocal cygwin
  endif
endif
:BTW addlocal STLFilt
" silent! unlet b:BTW_project_executable
LetIfUndef b:BTW_project_executable.type 'ctest'
" sets b:BTW_project_executable.rule
call <+s:_prj_config+>_menu.def_ctest_targets.set_ctest_argument()

let b:BTW_project_target = ''
let b:BTW_project_config = {
      \ 'type': 'ccmake',
      \ 'arg': (s:project_sources_dir),
      \ 'wd' : lh#function#bind('b:BTW_compilation_dir'),
      \ '_'  : <+s:_prj_config+>
      \ }

" ======================[ tags generation {{{2
" Be sure tags are automatically updated on the current file
LetIfUndef p:tags_options.no_auto 0
" Declare the indexed filetypes
call lh#tags#add_indexed_ft('c', 'cpp')
" Update Vim &tags option w/ the tag file produced for the current project
call lh#tags#update_tagfiles() " uses s:project_sources_dir/BTW_project_config

if SystemDetected() != 'msdos'
  " You'll have to generate thoses files for your system...
  call lh#path#munge(&l:tags, $HOME.'/dev/tags/stl.tags')
  call lh#path#munge(&l:tags, $HOME.'/dev/tags/boost.tags')
  " ITK and OTB
  " call lh#path#munge(&l:tags, $HOME.'/dev/tags/itk.tags')
  " call lh#path#munge(&l:tags, $HOME.'/dev/tags/otb.tags')
endif

" ======================[ Project's style {{{2
silent! source <sfile>:p:h/_vimrc_cpp_style.vim
LetTo p:ProjectVersion        = '<+_version_+>'
let s:ns = lh#let#to('p:cpp_project_namespace', '<+project_ns+>')
" Expecting your project has a <+project_ns+>::Exception type
call lh#let#to('p:exception_type', s:ns.'::Exception')

" Special management of tests and unit tests
if expand('%:p') =~ s:project_sources_dir.'/Testing'
  LetIfUndef p:<+project_ns+>_dox_group = 'gTests'
  LetIfUndef p:is_unit_test = 1
endif

" ======================[ Settings for searchfile and gf {{{2
let b:searchfile_ext = 'h,H,C,cpp,cxx,hxx,txx'
setlocal suffixesadd+=.h,.H,.C,.cpp,.cxx,.hxx,.txx'

" ======================[ Menus {{{2
MuT:  if has_key(s:_prj_kind, 'cmake')
call lh#menu#make('nic', '50.11', '&Project.Edit local &CMake file', '<localleader><F7>', '<buffer>', ':call <+s:_prj_config+>.functions.EditLocalCMakeFile()<cr>')
call lh#menu#make('nic', '50.12', '&Project.Edit local &CMake file (vertical)', '<localleader>v<F7>', '<buffer>', ':call <+s:_prj_config+>.functions.EditLocalCMakeFile("vert")<cr>')
MuT:  endif
" call lh#menu#make('nic', '50.11', '&Project.Edit local &Scons file', '', '<buffer>', ':call EditLocalSconsFile()<cr>')
call lh#menu#make('nic', '50.76', '&Project.Edit local &vimrc', '<localleader>le', '<buffer>', ':call lh#buffer#jump('.string(s:script).', "sp")<cr>' )

" ======================[ Local variables to automagically import in QuickFix buffer {{{2
QFImport tags_select
" QFImport &path
" QFImport BTW_project_target
" QFImport BTW_compilation_dir
" QFImport BTW_project_config
" QFImport includes
