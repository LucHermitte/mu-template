VimL: "«Vim» scripts header Template File, Luc Hermitte
"=============================================================================
VimL: call s:Include('dollar_id', '_')
MuT:  let s:root = s:localvimrc ? (exists('g:root')?resolve(g:root).','.g:root.',' : '').$HOME : &rtp
MuT:  let s:path  = lh#path#strip_start(expand('%:p'), s:root)
MuT:  "let s:path  = lh#path#strip_start(expand('%:p'), &rtp)
MuT:  let s:align = repeat(' ', 49-strlen(s:path))
" File:         ¡s:path.s:align¡ {{{1
" Author:       ¡Author()¡
VimL: " <----- License
MuT:  let s:root2 = expand('%:p')[0:-1+stridx(expand('%:p'), s:path)]
MuT:  let s:license = glob(s:root2 . 'License*')
MuT:  if !empty(s:license)
MuT:    let s:license_type = lh#ft#option#get('license_type', lh#marker#txt('GPLv3 with exceptions'))
" License:      <+s:license_type+>
VimL: " TODO store the kind of license somewhere
VimL: " TODO support storages other than github one
"               <URL:<+lh#vcs#as_http(fnamemodify(s:license, ':h'))+>/blob/master/License.md>
MuT:  endif
VimL: " <----- Version
MuT:  let s:mkvba = s:root2 . 'mkVba/mk-*.vim'
VimL: let s:mkvba = glob(s:mkvba)
MuT:  if !empty(s:mkvba) && -1 == stridx(s:mkvba, "\n")
VImL:   let s:version_lines = filter(readfile(s:mkvba), 'v:val =~ "\\vlet\\s+s:(k_)=version\\s*\\="')
VimL:   let s:version = empty(s:version_lines) ? lh#marker#txt('001') : matchstr(substitute(s:version_lines[0], '\.', '', 'g'), '.*=\s*\zs.*')
MuT:  else
VimL:   let s:version = lh#marker#txt('001')
MuT:  endif
" Version:      <+substitute(substitute(s:version, "'", '', 'g'), '\d', '&.', 'g')+>
let s:k_version = <+s:version+>
" Created:      <+lh#time#date()+>
" Last Update:  <+s:Include('dollar_date', '_')+>
"------------------------------------------------------------------------
VimL: let s:_prj_description = s:Param('description', lh#marker#txt('description'))
" Description:
"       <+s:_prj_description+>
"
"------------------------------------------------------------------------
MuT:  if s:localvimrc
" Installation:
"       The file must be present in a directory parent of every directories
"       where the definitions must apply.
MuT:  endif
" History:      <+history+>
" TODO:         <+missing features+>
" }}}1
"=============================================================================

