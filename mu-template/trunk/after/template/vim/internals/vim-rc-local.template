VimL: " $Id$
VimL: "Vim local-vimrc Template File, Luc Hermitte
VimL: let s:location = fnamemodify(s:path, ':r')
VimL: " Override s:fn computation for local-vimrc case
VimL: let s:fn = substitute(s:location,'\(\W\|_\)\+', '_', 'g')
VimL: silent! unlet s:_prj_kind
VimL: silent! unlet g:prj_kind
VimL: debug let s:_prj_kind = s:Param('project_kind', {})
VimL: let g:prj_kind = s:_prj_kind
" Always loaded {{{1
MuT:  if has_key(s:_prj_kind, 'c') || has_key(s:_prj_kind, 'cpp')
VimL:     call s:Include('vim-rc-global-ccpp', 'vim/internals')
MuT:  endif

" Buffer-local Definitions {{{1
" Avoid local reinclusion {{{2
if &cp || (exists("b:loaded_¡s:fn¡")
      \ && (b:loaded_¡s:fn¡ >= s:k_version)
      \ && !exists('g:force_reload_¡s:fn¡'))
  finish
endif
let b:loaded_¡s:fn¡ = s:k_version
let s:cpo_save=&cpo
set cpo&vim
" Avoid local reinclusion }}}2

let s:script = expand("<sfile>:p")
MuT:  if has_key(s:_prj_kind, 'cmake')
VimL:     call s:Include('vim-rc-local-cmake', 'vim/internals')
MuT:  endif
MuT:  if has_key(s:_prj_kind, 'c') || has_key(s:_prj_kind, 'cpp')
VimL:     call s:Include('vim-rc-local-ccpp', 'vim/internals')
MuT:  endif
VimL: " Bug tracker
VimL: let s:bug_tracker = WHICH('CONFIRM',"Which bug tracker will you use ?", ['None/Another', '&Jira'])
MuT:  if s:bug_tracker == 'jira'
VimL:     call s:Include('vim-rc-local-jira', 'vim/internals')
MuT:  endif
MuT:  if empty(s:_prj_kind)
VimL:     call s:Include('vim-rc-local-default', 'vim/internals')
MuT:  endif

" ======================[ Other commands {{{2
command! -b -nargs=* LVEcho echo <sid>Echo(<args>)

"=============================================================================
" Global Definitions {{{1
" Avoid global reinclusion {{{2
if &cp || (exists("g:loaded_¡s:fn¡")
      \ && (g:loaded_¡s:fn¡ >= s:k_version)
      \ && !exists('g:force_reload_¡s:fn¡'))
  let &cpo=s:cpo_save
  finish
endif
let g:loaded_¡s:fn¡ = s:k_version
" Avoid global reinclusion }}}2
"------------------------------------------------------------------------
" ======================[ Misc function {{{2
" Function: s:Echo(expr) {{{3
function! s:Echo(expr)
  return a:expr
  " return eval(a:expr)
endfunction
"------------------------------------------------------------------------
" Functions {{{2
" Functions }}}2
